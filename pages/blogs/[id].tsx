import Head from 'next/head';
import Router from 'next/router';
import api from '../../utils/api';
import ArticleContent from '../../components/ArticleContent';
import AuthorHeader from '../../components/AuthorHeader';
import BigAuthorPanel from '../../components/BigAuthorPanel';
import Container from '../../components/Container';
import RecoCard from '../../components/RecoCard';
import SideBar from '../../components/SideBar';

import { AllHTMLAttributes, useMemo } from 'react';
import { Article } from '../../store/reducers/articles';
import { NextPageContext } from 'next';

const author = {
  name: 'Wuzhong',
  date: 'Jul 7 ,2022',
  lastEditTime: '3 min read'
};

interface DetailBlogPageProps extends AllHTMLAttributes<HTMLDivElement> {
  article: Article;
}

export default function DetailBlogPage({ article }: DetailBlogPageProps) {
  return (
    <>
      <Head>
        <title>WuBlog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {article ? (
          <Container className="relative w-full flex gap-8 justify-between">
            <div className="pt-48 flex flex-col">
              <AuthorHeader author={author} />
              <ArticleContent content={article.text!} />
              <div className="h-12"></div>
            </div>
            <SideBar>
              <div className="flex flex-col p-3 gap-3 sticky top-24">
                <BigAuthorPanel className="p-3" />
                <span className="text-gray-600 font-medium p-3">More from WuBlog</span>

                {[0, 0, 0].map((article, idx) => (
                  <RecoCard key={idx} />
                ))}
              </div>
            </SideBar>
          </Container>
        ) : (
          <div>No Articles.</div>
        )}
      </main>
    </>
  );
}

export async function getServerSideProps({ query, req }: NextPageContext) {
  const { id } = query;
  const { cookie } = req!.headers;

  let article;

  try {
    const res = await api.getArticleByIdReq(id as string, {
      headers: { cookie }
    });

    article = res.data;
    console.log(`Receive article`, article);
  } catch (err) {
    let msg;
    if (!(err as any).response) {
      msg = err;
    } else {
      if ((err as any).response.data.msg) {
        msg = (err as any).response.data.msg;
      } else {
        msg = (err as any).response.data;
      }
    }
    console.error(msg);

    article = null;
  }

  return {
    props: {
      article
    }
  };
}
